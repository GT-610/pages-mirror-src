<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>欢迎来到 GT610 的小仓库！</title>
    <link href="/2024/02/29/hello-world/"/>
    <url>/2024/02/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>总觉得有时候得记录点什么，于是就开了这个小博客，不管有没有人看，我会坚持写下去的。</p><p>我是 <code>GT610</code>，也叫 <code>二次率战术核显</code>，也有人叫我 <code>核显</code>，不过这个都不重要啦。</p><p>不定期发一些技术向的教程，或者随便吐槽两句。</p><p>就这样。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ 动态规划 学习记录</title>
    <link href="/2024/02/29/dp-cpp/"/>
    <url>/2024/02/29/dp-cpp/</url>
    
    <content type="html"><![CDATA[<blockquote><p>动态规划（英语：Dynamic programming，简称DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p><p>动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。 </p><footer><strong>维基百科</strong><cite><a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92</a></cite></footer></blockquote><p>感觉维基给的定义有点抽象……？说简单点就是：</p><ol><li>把原来问题拆成<strong>小问题</strong>。</li><li><strong>逐个求解</strong>小问题，然后把答案保存起来。</li><li>再根据小问题的答案去反推原来问题的题解。</li></ol><p>核心就是：<strong>拆分子问题，记住答案，以减少重复的计算</strong>。</p><p>感觉还是看不懂……用网上一个很流行的例子去解释：</p><blockquote><p>A ： “1+1+1+1+1+1+1+1 &#x3D;？”<br>A ： “上面等式的值是多少”<br>B ： “8”<br>A : 在上面等式的左边写上 “1+” 呢？<br>A : “此时等式的值为多少”<br>B : 很快得出答案 “9”<br>A : “你怎么这么快就知道答案了”<br>A : “只要在8的基础上加1就行了”<br>A : “所以你不用重新计算，因为你记住了第一个等式的值为8!动态规划算法也可以说是 ‘记住求过的解来节省时间’”</p></blockquote><p>也就是说我想办法<strong>记住过去的答案</strong>，这样我不用重复计算了。</p><h2 id="两种形式"><a href="#两种形式" class="headerlink" title="两种形式"></a>两种形式</h2><p>求解的方式有两种：<strong>自顶向下的备忘录法、自底向上</strong>。</p><p>举个例子：<em>斐波那契数列</em>。也就是说：<br> <blockquote><p> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo>&#x3D;</mo><mn>1</mn><mspace linebreak="newline"></mspace><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>&#x3D;</mo><mn>1</mn><mspace linebreak="newline"></mspace><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>&#x3D;</mo><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>F</mi><mi>i</mi><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">Fib(0)&#x3D;1\<br>Fib(1)&#x3D;1\<br>Fib(n)&#x3D;Fib(n-1)+Fib(n-2)\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">i</span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">i</span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">i</span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">i</span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">i</span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span><span class="mspace newline"></span></span></span> </p></blockquote></p><p> 这个用递归可以直接解决：<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(n&gt;=<span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> <span class="hljs-built_in">fib</span>(n<span class="hljs-number">-1</span>)+<span class="hljs-built_in">fib</span>(n<span class="hljs-number">-2</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><p> 假设我输入 6，那么执行的递归树是这样：</p><pre><code class="mermaid" >graph TD;A["fib(6)"]-->B["fib(5)"]-->C2["fib(4)"]-->D3["fib(3)"]-->E4["fib(2)"]-->F5["fib(1)"];A-->C1["fib(4)"]-->D1["fib(3)"]-->E3["fib(2)"]-->F4["fib(1)"];B-->D2["fib(3)"]-->E2["fib(2)"]-->F3["fib(1)"];C1-->E1["fib(2)"]-->F1["fib(1)"];D1-->F2["fib(1)"];E1-->G1["fib(0)"];C2-->D4["fib(2)"]-->E5["fib(1)"];D2-->E6["fib(1)"];D3-->E7["fib(1)"];D4-->F6["fib(0)"];E2-->F8["fib(0)"];E3-->F7["fib(0)"];E4-->F9["fib(0)"]; </code></pre><p>从上面的递归树中可以看到，我运行一个 fib(6)，很多重复的节点，比如 fib(5)、fib(2)等等，被重复执行了很多次，这样的结果就是浪费时间。<br>这些重复的节点我们可以在遇到、计算之后，将其记录下来，后面再使用的时候直接把结果拉过来用，这样就节省了大量的时间。</p><p>我们分别用自顶向下和自底向上的方法，去解决斐波那契数列问题。</p><h3 id="自顶向下的备忘录法"><a href="#自顶向下的备忘录法" class="headerlink" title="自顶向下的备忘录法"></a>自顶向下的备忘录法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> memo[n]=&#123;<span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> memo[])</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(memo[n]!=<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> memo[n];<br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">2</span>)memo[n]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> memo[n]=<span class="hljs-built_in">fib</span>(n<span class="hljs-number">-1</span>,memo)+<span class="hljs-built_in">fib</span>(n<span class="hljs-number">-2</span>,memo);<br>    <span class="hljs-keyword">return</span> memo[n];<br>&#125;<br></code></pre></td></tr></table></figure><p>备忘录法还是比较好理解的，先创建一个数组 memo 用来存储每个斐波那契数列对应的每一个值，然后再递归的时候，如果发现 memo 中<strong>存在</strong>之前已经计算好的值，则直接调用；如果还没有算过，则计算后保存在 memo 数组中。这样第n此计算 fib 时就不用重新递归了，效率大大提高。</p><h3 id="自底向上"><a href="#自底向上" class="headerlink" title="自底向上"></a>自底向上</h3><p>备忘录法减少了重复的计算，但无论怎样，计算时还是递归去算的，既然我 fib(1)、fib(2)这样的都要算，那我为什么不先算好 fib(1)、fib(2)呢？</p><p>如果我从 fib(1) fib(2)开始，往上计算到目标的 fib（比如 fib(6)），这就是自底向上的动态规划，这种方法也是动态规划的核心：<strong>先计算子问题，再由子问题计算父问题。</strong></p><p>cpp<br>int fib(int n){<br>    int memo[n];<br>    memo[0]&#x3D;0;<br>    memo[1]&#x3D;1;<br>    for(int i&#x3D;2;i&lt;&#x3D;n;++i){<br>        memo[i]&#x3D;memo[i-1]+memo[i-2];<br>}<br>    return memo[n];<br>}</p><p>自底向上的计算方法，避免了递归产生的较高的栈开销，进一步降低了空间复杂度。<del>（正常人类手算也是这么算的吧）</del></p><p>由于实际参与循环的<strong>只有数组中的三个变量</strong>，如果中间计算的结果我们都不需要，那么我们还可以<strong>用三个变量代替整个数组</strong>，<strong>进一步压缩空间</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>C++</tag>
      
      <tag>算法竞赛</tag>
      
      <tag>动态规划</tag>
      
      <tag>DP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 深度优先搜索 (DFS) 学习记录</title>
    <link href="/2024/02/28/dfs-cpp/"/>
    <url>/2024/02/28/dfs-cpp/</url>
    
    <content type="html"><![CDATA[<p>深度优先搜索是一种用于遍历或搜索树或图的算法。所谓深度优先，就是说每次都尝试向更深的节点走。</p><p>要说个人理解的话，我的理解大概就是这样：</p><blockquote><p>有一个人去某景区旅游，他现在在景区入口，景区里的一些路，有的能通到出口，有的不能。</p><p>这个人呢很倔强，他要一条一条去走，不走到路的尽头绝不回头。</p><p>他从第一条路走下去，走到头发现没路了，再回头到上一个分叉点，记下来这个分叉走过了；然后走另一个分叉，全部分叉走完了，再回到分叉点，再往回退一个分叉，记下来这个大分叉走过了没有路，然后走下一个分叉……</p></blockquote><p>如果把这样一个景区抽象为一个图，那么也就是说，深度优先的搜索就是<strong>每次都尝试向更深的节点走</strong>。</p><p>DFS 搜索的实现方式一般是<strong>递归</strong>。也就是递归调用自身。在每次 DFS 遍历中都会对访问过的点<strong>打上标记</strong>，在遍历图的时候<strong>跳过已标记的点</strong>，以确保每个点<strong>只访问一次</strong>。</p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><table><thead><tr><th align="center">时间复杂度</th><th align="center">空间复杂度</th></tr></thead></table><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n+m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> | <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="寻找路线（走迷宫）"><a href="#寻找路线（走迷宫）" class="headerlink" title="寻找路线（走迷宫）"></a>寻找路线（走迷宫）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> c)</span></span>&#123;<br>    <span class="hljs-comment">// 设定这个位置已经访问</span><br>    visited[r][c]=<span class="hljs-literal">true</span>; <br><br>    <span class="hljs-comment">// 存储遍历时行走的参数，这样循环遍历的时候方便调用</span><br>    <span class="hljs-comment">// dr 为横着走, dc 为竖着走</span><br>    <span class="hljs-comment">// 顺序分别为：左 右 上 下</span><br>    <span class="hljs-type">int</span> dr[]=&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> dc[]=&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-comment">/*当前位置为目标位置*/</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 遍历图，开始找路</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d=<span class="hljs-number">0</span>;d&lt;<span class="hljs-number">4</span>;++d)&#123;<br>        <span class="hljs-type">int</span> tr=r+dr[d]; <span class="hljs-comment">// 横向</span><br>        <span class="hljs-type">int</span> tc=c+dc[d]; <span class="hljs-comment">// 竖向</span><br><br>        <span class="hljs-comment">// 如果满足特定条件我就继续找，什么时候找到了 (DFS 返回 True) 就直接结束，这里不回溯</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">inMap</span>(tr,tc)&amp;&amp;<span class="hljs-comment">/*满足特定条件*/</span>*&amp;&amp;!visited[tr][tc])<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">DFS</span>(tr,tc))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 没找到</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">inMap</span><span class="hljs-params">(<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> c)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> r&gt;=<span class="hljs-number">0</span>&amp;&amp;r&lt;n&amp;&amp;c&gt;=<span class="hljs-number">0</span>&amp;&amp;c&lt;m;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码调用 DFS 时，传入起点坐标，返回 <code>true</code> 则找到，<code>false</code> 则没找到。</p><p><a href="https://www.luogu.com.cn/problem/AT_dfs_a">标准例题</a></p><p>AC 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">char</span> map[<span class="hljs-number">505</span>][<span class="hljs-number">505</span>];<br><span class="hljs-type">bool</span> visited[<span class="hljs-number">505</span>][<span class="hljs-number">505</span>];<br><span class="hljs-type">int</span> n,m;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">inMap</span><span class="hljs-params">(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)</span></span>;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;++j)<br>            cin &gt;&gt; map[i][j];<br>    <br>    <span class="hljs-type">int</span> startx,starty;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;++j)<br>        <span class="hljs-keyword">if</span>(map[i][j]==<span class="hljs-string">&#x27;s&#x27;</span>)&#123;<br>            startx=i;<br>            starty=j;<br>        &#125;<br>    <br>    <span class="hljs-type">bool</span> res=<span class="hljs-built_in">DFS</span>(startx,starty);<br>    cout &lt;&lt; (res?<span class="hljs-string">&quot;Yes\n&quot;</span>:<span class="hljs-string">&quot;No\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> c)</span></span>&#123;<br>    visited[r][c]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-type">int</span> dr[]=&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> dc[]=&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-keyword">if</span>(map[r][c]==<span class="hljs-string">&#x27;g&#x27;</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d=<span class="hljs-number">0</span>;d&lt;<span class="hljs-number">4</span>;++d)&#123;<br>        <span class="hljs-type">int</span> tr=r+dr[d];<br>        <span class="hljs-type">int</span> tc=c+dc[d];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">inMap</span>(tr,tc)&amp;&amp;map[tr][tc]!=<span class="hljs-string">&#x27;#&#x27;</span>&amp;&amp;!visited[tr][tc])<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">DFS</span>(tr,tc))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">inMap</span><span class="hljs-params">(<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> c)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> r&gt;=<span class="hljs-number">0</span>&amp;&amp;r&lt;n&amp;&amp;c&gt;=<span class="hljs-number">0</span>&amp;&amp;c&lt;m;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="剩下的学到新的再写！"><a href="#剩下的学到新的再写！" class="headerlink" title="剩下的学到新的再写！"></a>剩下的学到新的再写！</h2>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>C++</tag>
      
      <tag>算法竞赛</tag>
      
      <tag>搜索</tag>
      
      <tag>深度优先搜索</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红米手机 2 刷机资源 / 教程</title>
    <link href="/2024/02/04/redmi-2-flashing/"/>
    <url>/2024/02/04/redmi-2-flashing/</url>
    
    <content type="html"><![CDATA[<blockquote><p>红米手机 2 是小米公司于 2015 年 1 月 3 日在 QQ 上正式发布的手机。</p><p>红米手机 2 屏幕采用 4.7 英寸全贴合 IPS 视网膜屏；红米手机 2 高度 134 毫米，宽度 67.2 毫米，厚度 9.4 毫米，重量 133 克。红米手机 2 有白色、深灰、明黄、浅绿、淡粉五种颜色。</p><p>红米手机 2 搭载高通骁龙 410 四核处理器，后置 800 万像素背照式相机，5 片式镜头，f&#x2F;2.2 光圈，28 毫米广角，200 万像素前置相机，支持二代智能美颜，电池容量 2200 毫安时。</p><footer><strong>百度百科</strong><cite><a href="https://baike.baidu.com/item/%E7%BA%A2%E7%B1%B3%E6%89%8B%E6%9C%BA2">baike.baidu.com/item/%E7%BA%A2%E7%B1%B3%E6%89%8B%E6%9C%BA2</a></cite></footer></blockquote><p>红米 2 是红米系列非常经典的一个机型，诞生于刷机黄金时代的它，拥有很多刷机资源，甚至还可以运行完整的 GNU&#x2F;Linux，在可玩性上也是非常高的。直到今天，仍然有大佬在给红米 2 做出了安卓 13 的适配，这对于一个 2015 年初的入门机型来说，是非常少见的。</p><h2 id="为什么选择红米-2-刷机？"><a href="#为什么选择红米-2-刷机？" class="headerlink" title="为什么选择红米 2 刷机？"></a>为什么选择红米 2 刷机？</h2><ul><li>价格便宜。截止文章发稿时，2+16GB 的红米 2 在闲鱼上只需要 50-80 元左右，1+8GB 的会更便宜，即使不小心刷坏了也不心疼。</li><li>没有 BL 锁，可以任意刷。</li><li>刷机包非常丰富，安卓从 4.4 到 13，每一个版本都有许多刷机包可供选择，甚至还有 PostmarketOS、Mobian 这样的 GNU&#x2F;Linux 发行版。</li><li>功耗低，性能够用。红米 2 的骁龙 410 处理器也算是历史上的一颗神U，刷 GNU&#x2F;Linux 性能比树莓派高，价格远低于树莓派。（有很多人选择用红米 2 作 3D 打印机的上位机）</li></ul><h2 id="适用设备"><a href="#适用设备" class="headerlink" title="适用设备"></a>适用设备</h2><p>本教程适用于以下设备，内存规格不限：</p><h3 id="wt86047"><a href="#wt86047" class="headerlink" title="wt86047"></a>wt86047</h3><table><thead><tr><th align="center">设备名称</th><th align="center">型号</th></tr></thead><tbody><tr><td align="center">2014813</td><td align="center">红米 2 移动版</td></tr><tr><td align="center">2014112</td><td align="center">红米 2 移动合约版</td></tr><tr><td align="center">2014816</td><td align="center">红米 2A 高配版</td></tr></tbody></table><h3 id="wt88047"><a href="#wt88047" class="headerlink" title="wt88047"></a>wt88047</h3><table><thead><tr><th align="center">设备名称</th><th align="center">型号</th></tr></thead><tbody><tr><td align="center">2014811</td><td align="center">红米 2 联通版</td></tr><tr><td align="center">2014812</td><td align="center">红米 2 电信版</td></tr><tr><td align="center">2014821</td><td align="center">红米 2 电信合约版</td></tr><tr><td align="center">2014817</td><td align="center">红米 2 国际版</td></tr><tr><td align="center">2014818</td><td align="center">红米 2 印度版</td></tr><tr><td align="center">2014819</td><td align="center">红米 2 巴西版</td></tr></tbody></table><p>可以在 <code>设置 - 我的设备</code> 或者 <code>关于手机</code> 页面查到设备型号。</p><div class="note note-warning">            <p>搭载骁龙 410 的红米 2A 高配版也适用本教程，但是<strong>搭载联芯的 2A (<code>lte26007</code>) 不适用</strong>。</p>          </div><h2 id="资源汇总"><a href="#资源汇总" class="headerlink" title="资源汇总"></a>资源汇总</h2><p><a href="https://www.123pan.com/s/vzWAjv-uEgV3.html">123 云盘链接</a></p><p>提取码：<code>hm02</code></p><p>安卓刷机包按版本代号整理。</p><div class="note note-danger">            <p>刷机前请<strong>备份重要数据</strong>。刷机<strong>有风险</strong>，<strong>操作需谨慎</strong>。</p>          </div><h2 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h2><h3 id="刷入-TWRP"><a href="#刷入-TWRP" class="headerlink" title="刷入 TWRP"></a>刷入 TWRP</h3><p>设备搭载的骁龙 410 处理器是 <strong>64 位</strong>的，但官方的 MIUI 系统都是 <strong>32 位</strong>的。但是第三方 ROM 中有不少 64 位的，可以运行现代 64 位应用。</p><div class="note note-info">            <p>64 位 TWRP 可以用来刷 64 位系统，也可以刷 32 位系统，但是 32 位的 TWRP 只能用来刷 32 位系统，不能用来刷 64 位系统</p>          </div><p>换句话说，刷 64 位系统必须用 64 位 TWRP。</p><h3 id="更换底包"><a href="#更换底包" class="headerlink" title="更换底包"></a>更换底包</h3><p>先根据要刷入的 ROM 的安卓版本，和自己的型号刷入对应的底包。如果是国际版，可以刷电信联通版的底包。</p><table><thead><tr><th align="center">底包</th><th align="center">可刷入的 ROM 安卓版本</th></tr></thead><tbody><tr><td align="center">4.4</td><td align="center">安卓 4.4（Kitkat）</td></tr><tr><td align="center">5.1</td><td align="center">安卓 5.1 及以上所有版本</td></tr></tbody></table><p>底包通过 TWRP 卡刷即可。</p><h3 id="刷入刷机包"><a href="#刷入刷机包" class="headerlink" title="刷入刷机包"></a>刷入刷机包</h3><p>一定先阅读资源目录内的<em>刷前说明</em>，由于每个包的刷入方式不同，请务必按照里面的说明操作！没有说明的包直接刷入即可。</p><p>有的包需要扩容，手动扩容、分区丢失修复等情况，详见<a href="#%E6%89%A9%E5%AE%B9">“扩容”一节</a>。</p><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><div class="note note-danger">            <p>本小节未完成。我的设备不在身边，没法继续演示具体的情况。</p><p>有愿意协助的可以帮我补充或联系我协助完成，谢谢。</p>          </div><div class="note note-warning">            <p>部分无需扩容的刷机包<strong>不支持扩容后的分区</strong>，直接刷入已扩容设备<strong>可能会无法启动</strong>。</p><p>如果设备扩容后需要刷回不需扩容的包，请<strong>恢复原厂分区后</strong>再刷入。</p>          </div><p>部分包（高版本安卓系统、64 位系统）需要更大的系统分区，刷入这些包之前，我们需要进行扩容操作。</p><p>刷机资源内提供了自动扩容的包，当然有时候我们会遇到以下情况：</p><ul><li>分区丢失或者异常，导致卡米 &#x2F; 系统无法进入</li><li>手上没有 SD 卡，用不了自动扩容包</li></ul><p>这个时候我们需要使用资源内的 <code>parted</code> 工具进行手动扩容。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>下载资源汇总内的 <code>parted</code>。</li><li>手机进入 TWRP，然后连接电脑。</li><li>用 <code>adb push</code> 命令将 <code>parted</code> 复制到 <code>/sbin</code> 目录下，然后执行 <code>adb shell</code>进入 Shell。</li><li>执行 <code>chmod 755 /sbin/parted</code> 已获取必要权限运行 <code>parted</code>。</li><li>然后运行 <code>parted /dev/block/mmcblk0</code>。</li></ol><h4 id="分区操作"><a href="#分区操作" class="headerlink" title="分区操作"></a>分区操作</h4><p>运行 <code>parted /dev/block/mmcblk0</code> 命令后，你能看到如下输出：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">GNU Parted <span class="hljs-number">1.8</span>.<span class="hljs-number">8.1</span>.<span class="hljs-number">179</span>-aef3<br><span class="hljs-keyword">Using</span> /dev/<span class="hljs-keyword">block</span>/mmcblk0<br>Welcome <span class="hljs-keyword">to</span> GNU Parted! <span class="hljs-keyword">Type</span> <span class="hljs-string">&#x27;help&#x27;</span> <span class="hljs-keyword">to</span> view a list <span class="hljs-keyword">of</span> commands.<br>(parted)<br></code></pre></td></tr></table></figure><p>此时表明你已进入 <code>parted</code> 分区程序。</p><div class="note note-danger">            <p>接下来的操作请<strong>务必小心</strong>，因为改动分区可不是闹着玩的！</p><p>请再次确认重要数据已经备份，如果还没有，请输入 <code>q</code> 退出。</p>          </div><p>输入 <code>p</code> 查看设备分区表。2+16GB 的分区表应该如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Model</span>: MMC R1J96N (sd/mmc)<br><span class="hljs-attribute">Disk</span> /dev/block/mmcblk0: <span class="hljs-number">15</span>.<span class="hljs-number">8</span>GB<br><span class="hljs-attribute">Sector</span> size (logical/physical): <span class="hljs-number">512</span>B/<span class="hljs-number">512</span>B<br><span class="hljs-attribute">Partition</span> Table: gpt<br><br><span class="hljs-attribute">Number</span>  Start   End     Size    File system  Name      Flags<br> <span class="hljs-attribute">1</span>      <span class="hljs-number">67</span>.<span class="hljs-number">1</span>MB  <span class="hljs-number">134</span>MB   <span class="hljs-number">67</span>.<span class="hljs-number">1</span>MB  fat16        modem<br> <span class="hljs-attribute">2</span>      <span class="hljs-number">134</span>MB   <span class="hljs-number">135</span>MB   <span class="hljs-number">524</span>kB                sbl1<br> <span class="hljs-attribute">3</span>      <span class="hljs-number">135</span>MB   <span class="hljs-number">135</span>MB   <span class="hljs-number">524</span>kB                sbl1bak<br> <span class="hljs-attribute">4</span>      <span class="hljs-number">135</span>MB   <span class="hljs-number">136</span>MB   <span class="hljs-number">1049</span>kB               aboot<br> <span class="hljs-attribute">5</span>      <span class="hljs-number">136</span>MB   <span class="hljs-number">137</span>MB   <span class="hljs-number">1049</span>kB               abootbak<br> <span class="hljs-attribute">6</span>      <span class="hljs-number">137</span>MB   <span class="hljs-number">138</span>MB   <span class="hljs-number">524</span>kB                rpm<br> <span class="hljs-attribute">7</span>      <span class="hljs-number">138</span>MB   <span class="hljs-number">138</span>MB   <span class="hljs-number">524</span>kB                rpmbak<br> <span class="hljs-attribute">8</span>      <span class="hljs-number">138</span>MB   <span class="hljs-number">139</span>MB   <span class="hljs-number">524</span>kB                tz<br> <span class="hljs-attribute">9</span>      <span class="hljs-number">139</span>MB   <span class="hljs-number">139</span>MB   <span class="hljs-number">524</span>kB                tzbak<br><span class="hljs-attribute">10</span>      <span class="hljs-number">139</span>MB   <span class="hljs-number">140</span>MB   <span class="hljs-number">524</span>kB                hyp<br><span class="hljs-attribute">11</span>      <span class="hljs-number">140</span>MB   <span class="hljs-number">141</span>MB   <span class="hljs-number">524</span>kB                hypbak<br><span class="hljs-attribute">12</span>      <span class="hljs-number">141</span>MB   <span class="hljs-number">142</span>MB   <span class="hljs-number">1049</span>kB               pad<br><span class="hljs-attribute">13</span>      <span class="hljs-number">142</span>MB   <span class="hljs-number">143</span>MB   <span class="hljs-number">1573</span>kB               modemst1<br><span class="hljs-attribute">14</span>      <span class="hljs-number">143</span>MB   <span class="hljs-number">145</span>MB   <span class="hljs-number">1573</span>kB               modemst2<br><span class="hljs-attribute">15</span>      <span class="hljs-number">145</span>MB   <span class="hljs-number">146</span>MB   <span class="hljs-number">1049</span>kB               misc<br><span class="hljs-attribute">16</span>      <span class="hljs-number">146</span>MB   <span class="hljs-number">146</span>MB   <span class="hljs-number">1024</span>B                fsc<br><span class="hljs-attribute">17</span>      <span class="hljs-number">146</span>MB   <span class="hljs-number">146</span>MB   <span class="hljs-number">8192</span>B                ssd<br><span class="hljs-attribute">18</span>      <span class="hljs-number">146</span>MB   <span class="hljs-number">156</span>MB   <span class="hljs-number">10</span>.<span class="hljs-number">5</span>MB               splash<br><span class="hljs-attribute">19</span>      <span class="hljs-number">201</span>MB   <span class="hljs-number">201</span>MB   <span class="hljs-number">32</span>.<span class="hljs-number">8</span>kB               DDR<br><span class="hljs-attribute">20</span>      <span class="hljs-number">201</span>MB   <span class="hljs-number">203</span>MB   <span class="hljs-number">1573</span>kB               fsg<br><span class="hljs-attribute">21</span>      <span class="hljs-number">203</span>MB   <span class="hljs-number">203</span>MB   <span class="hljs-number">16</span>.<span class="hljs-number">4</span>kB               sec<br><span class="hljs-attribute">22</span>      <span class="hljs-number">203</span>MB   <span class="hljs-number">237</span>MB   <span class="hljs-number">33</span>.<span class="hljs-number">6</span>MB               boot<br><span class="hljs-attribute">23</span>      <span class="hljs-number">237</span>MB   <span class="hljs-number">1757</span>MB  <span class="hljs-number">1520</span>MB  ext4         system<br><span class="hljs-attribute">24</span>      <span class="hljs-number">1757</span>MB  <span class="hljs-number">1808</span>MB  <span class="hljs-number">51</span>.<span class="hljs-number">2</span>MB  ext4         cache<br><span class="hljs-attribute">25</span>      <span class="hljs-number">1808</span>MB  <span class="hljs-number">1841</span>MB  <span class="hljs-number">33</span>.<span class="hljs-number">6</span>MB  ext4         persist<br><span class="hljs-attribute">26</span>      <span class="hljs-number">1841</span>MB  <span class="hljs-number">1875</span>MB  <span class="hljs-number">33</span>.<span class="hljs-number">6</span>MB               recovery<br><span class="hljs-attribute">27</span>      <span class="hljs-number">1875</span>MB  <span class="hljs-number">1875</span>MB  <span class="hljs-number">524</span>kB                keystore<br><span class="hljs-attribute">28</span>      <span class="hljs-number">1875</span>MB  <span class="hljs-number">1875</span>MB  <span class="hljs-number">32</span>.<span class="hljs-number">8</span>kB               config<br><span class="hljs-attribute">29</span>      <span class="hljs-number">1875</span>MB  <span class="hljs-number">1978</span>MB  <span class="hljs-number">102</span>MB   ext4         oem<br><span class="hljs-attribute">30</span>      <span class="hljs-number">1978</span>MB  <span class="hljs-number">15</span>.<span class="hljs-number">8</span>GB  <span class="hljs-number">13</span>.<span class="hljs-number">8</span>GB  ext4         userdata<br></code></pre></td></tr></table></figure><pre><code class="hljs">我们需要调整的分区是编号 `23` 的 `system` 分区。因此我们需要动 `23` - `30` 号分区。</code></pre><ol><li><p>删除旧分区，依次执行以下命令：</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">rm</span> <span class="hljs-number">23</span><br><span class="hljs-attribute">rm</span> <span class="hljs-number">24</span><br><span class="hljs-attribute">rm</span> <span class="hljs-number">25</span><br><span class="hljs-attribute">rm</span> <span class="hljs-number">26</span><br><span class="hljs-attribute">rm</span> <span class="hljs-number">27</span><br><span class="hljs-attribute">rm</span> <span class="hljs-number">28</span><br><span class="hljs-attribute">rm</span> <span class="hljs-number">29</span><br><span class="hljs-attribute">rm</span> <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p> 执行完可以输入 <code>p</code> 查看分区是否已修改。此时编号应该只到 <code>22</code>，下面应该是未分配的。如果中间有确认就输入 <code>y</code> 确认。</p></li><li><p>创建分区。</p><p> 对于 2+16GB 的设备，依次输入以下命令：</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">236503040</span>B <span class="hljs-number">1756503551</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">23</span> system<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1756503552</span>B <span class="hljs-number">1807703551</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">24</span> cache<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1807703552</span>B <span class="hljs-number">1841257983</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">25</span> persist<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1841257984</span>B <span class="hljs-number">1874812415</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">26</span> recovery<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1874812416</span>B <span class="hljs-number">1875336703</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">27</span> keystore<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1875336704</span>B <span class="hljs-number">1875369471</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">28</span> config<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1875369472</span>B <span class="hljs-number">1977769471</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">29</span> oem<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1977769472</span>B <span class="hljs-number">15757983231</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">30</span> userdata<br></code></pre></td></tr></table></figure><p> 对于 1+8GB 的设备，输入以下命令：</p> <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">236503040</span>B <span class="hljs-number">1756503551</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">23</span> system<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1756503552</span>B <span class="hljs-number">1807703551</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">24</span> cache<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1807703552</span>B <span class="hljs-number">1841257983</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">25</span> persist<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1841257984</span>B <span class="hljs-number">1874812415</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">26</span> recovery<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1874812416</span>B <span class="hljs-number">1875336703</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">27</span> keystore<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1875336704</span>B <span class="hljs-number">1875369471</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">28</span> config<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1875369472</span>B <span class="hljs-number">1977769471</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">29</span> oem<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1977769472</span>B <span class="hljs-number">7818165759</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">30</span> userdata<br></code></pre></td></tr></table></figure><p> 有时候可能会弹出询问，按 <code>y</code> 确认即可。</p></li><li><p>输入 <code>quit</code> 退出 <code>parted</code>。</p></li><li><p>格式化分区，依次输入以下命令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mke2fs -t ext4 -b 4096 /dev/block/mmcblk0p23<br>mke2fs -t ext4 -b 4096 /dev/block/mmcblk0p24<br>mke2fs -t ext4 -b 4096 /dev/block/mmcblk0p29<br>mke2fs -t ext4 -b 4096 /dev/block/mmcblk0p30<br></code></pre></td></tr></table></figure></li><li><p>关联文件系统，依次输入以下命令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -sf /dev/block/mmcblk0p23 system<br><span class="hljs-built_in">ln</span> -sf /dev/block/mmcblk0p24 cache<br><span class="hljs-built_in">ln</span> -sf /dev/block/mmcblk0p25 persist<br><span class="hljs-built_in">ln</span> -sf /dev/block/mmcblk0p26 recovery<br><span class="hljs-built_in">ln</span> -sf /dev/block/mmcblk0p27 keystore<br><span class="hljs-built_in">ln</span> -sf /dev/block/mmcblk0p28 config<br><span class="hljs-built_in">ln</span> -sf /dev/block/mmcblk0p29 oem<br><span class="hljs-built_in">ln</span> -sf /dev/block/mmcblk0p30 userdata<br></code></pre></td></tr></table></figure></li><li><p>在 TWRP 中选择 <code>重启</code> - <code>重启至 Recovery</code>。此时你会发现 <code>system</code> 分区扩容到了 2GB。这个大小对于大多数刷机包都是完全足够的。此时你可以删掉 <code>parted</code>，也可以保留。如果要删除 <code>parted</code>，执行 <code>rm /sbin/parted</code>。</p></li></ol><h3 id="恢复原厂分区"><a href="#恢复原厂分区" class="headerlink" title="恢复原厂分区"></a>恢复原厂分区</h3><p>恢复原厂分区的操作除了<strong>第 2 步创建分区</strong>不一样外，其他的步骤<strong>一模一样</strong>。</p><p>对于 2+16GB 的设备，第 2 步应该依次输入以下命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">236503040</span>B <span class="hljs-number">1310244863</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">23</span> system<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1310244864</span>B <span class="hljs-number">1645789183</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">24</span> cache<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1645789184</span>B <span class="hljs-number">1679343615</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">25</span> persist<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1679343616</span>B <span class="hljs-number">1712898047</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">26</span> recovery<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1744830464</span>B <span class="hljs-number">1745354751</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">27</span> keystore<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1745354752</span>B <span class="hljs-number">1745387519</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">28</span> config<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1745387520</span>B <span class="hljs-number">1812496383</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">29</span> oem<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1879048192</span>B <span class="hljs-number">15757983231</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">30</span> userdata<br></code></pre></td></tr></table></figure><p>对于 1+8GB 的设备，第 2 步应该依次输入以下命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">236503040</span>B <span class="hljs-number">1310244863</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">23</span> system<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1310244864</span>B <span class="hljs-number">1645789183</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">24</span> cache<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1645789184</span>B <span class="hljs-number">1679343615</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">25</span> persist<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1679343616</span>B <span class="hljs-number">1712898047</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">26</span> recovery<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1744830464</span>B <span class="hljs-number">1745354751</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">27</span> keystore<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1745354752</span>B <span class="hljs-number">1745387519</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">28</span> config<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1745387520</span>B <span class="hljs-number">1812496383</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">29</span> oem<br><span class="hljs-attribute">mkpart</span> primary <span class="hljs-number">1879048192</span>B <span class="hljs-number">7818165759</span>B<br><span class="hljs-attribute">name</span> <span class="hljs-number">30</span> userdata<br></code></pre></td></tr></table></figure><p>其他步骤照着<a href="#%E6%89%A9%E5%AE%B9">扩容分区步骤</a>去做就可以了。</p><h2 id="GNU-Linux"><a href="#GNU-Linux" class="headerlink" title="GNU&#x2F;Linux"></a>GNU&#x2F;Linux</h2><div class="note note-danger">            <p>Linux 包<strong>不适合日常使用</strong>！</p><p>运行 GNU&#x2F;Linux 系统时，充电的时候需格外注意。最好在 TWRP Recovery 下为设备充电。<strong>不要让设备在无人看管的情况下充电！</strong> 充满后即使拔下，避免挂着一直充。</p>          </div><div class="note note-info">            <p>目前已知问题：</p><ul><li>相机无法使用</li><li>偶发性的卡死和闪屏</li><li>部分型号屏幕可能会出现显示异常</li></ul>          </div><div class="note note-warning">            <p>本包只支持安卓 5.1 的 Bootloader。如果是标配官方 4.4 或者其他第三方 ROM 刷入，请先<a href="#%E6%9B%B4%E6%8D%A2%E5%BA%95%E5%8C%85">刷入 MIUI 5.1 底包</a> （BL 更换）。</p>          </div><p>方法如下：</p><ol><li><p>在 <code>fastboot</code> 下刷入 <code>lk2nd</code>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fastboot flash boot lk2nd-msm8916.img<br></code></pre></td></tr></table></figure></li><li><p>执行 <code>fastboot reboot</code> 重启</p></li><li><p>开机后进入 <code>lk2nd</code> 的主界面，不要动，手机重新连接电脑，直接执行：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 填写实际下载到的文件</span><br>fastboot flash userdata 202******-****-postmarketOS-v**.**-phosh-18-xiaomi-wt88047.img<br></code></pre></td></tr></table></figure></li><li><p>完成后执行此命令重置 <code>system</code> 分区：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fastboot erase system    <br></code></pre></td></tr></table></figure></li><li><p>完成后重启。执行：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">fastboot reboot<br></code></pre></td></tr></table></figure></li><li><p>重启后进入 <code>lk2nd</code> 的主界面，按音量键调整最上面显示 <code>START</code>，然后按电源键进入系统</p></li></ol><p>开机后 mi 标逐渐变红 &#x2F; 变花是正常现象，此为加载显示驱动，耐心等待即可。</p><p>默认用户名：<code>user</code></p><p>默认解锁密码：<code>147147</code></p><p>默认用户 <code>user</code> 的密码：<code>147147</code></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>安卓玩机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷机</tag>
      
      <tag>红米2</tag>
      
      <tag>玩机</tag>
      
      <tag>红米手机</tag>
      
      <tag>小米</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不重装系统，直接从 Manjaro 切换到 Arch Linux</title>
    <link href="/2024/02/03/migrating-from-manjaro-to-arch/"/>
    <url>/2024/02/03/migrating-from-manjaro-to-arch/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>直接切换存在一定的“滚挂”风险，操作前建议做好重装系统的准备。</p>          </div><div class="note note-danger">            <p>虽然本教程的方法也可以直接从 Arch Linux 切换到 Manjaro，但我建议<strong>不要这样做！</strong> Arch Linux 的软件包普遍比 Manjaro 新，从 Arch 切换到 Manjaro 很可能会因为版本问题导致依赖冲突，增加“滚挂”风险！</p>          </div><p><del>众所周知</del>，Manjaro 是基于 Arch Linux 的一个发行版，但是 Manjaro 的大部分软件包的版本要低于 Arch Linux，使得 Manjaro 在获得近似 Arch 的优秀体验的同时，也保持良好的稳定性。</p><p>不过有时候总想尝试一下 Arch，重装系统又很麻烦，考虑到 Manjaro 和 Arch 的东西很接近 <del>（不像 Ubuntu 瞎改 Debian 还加屎山进去）</del>，直接迁移是一个比较方便快捷的选择。</p><p>演示环境为一个全新安装的 Manjaro + KDE 虚拟机。</p><p><img src="/2024/02/03/migrating-from-manjaro-to-arch/manjaro-initial.png" alt="Manjaro 初始环境"></p><div class="note note-danger">            <p>操作结束前，<strong>不要重启系统</strong>！</p>          </div><h2 id="更改-pacman-设置"><a href="#更改-pacman-设置" class="headerlink" title="更改 pacman 设置"></a>更改 <code>pacman</code> 设置</h2><p>编辑 <code>/etc/pacman.conf</code>，去除所有与 <code>manjaro</code> 相关的内容。</p><p>要改动的地方大致有以下部分，其他地方最好也检查一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 18 行<br>HoldPkg      = pacman glibc<br><br># 20 行 SyncFirst 注释掉<br># SyncFirst    = archlinux-keyring<br></code></pre></td></tr></table></figure><h2 id="更换-Arch-Linux-镜像源"><a href="#更换-Arch-Linux-镜像源" class="headerlink" title="更换 Arch Linux 镜像源"></a>更换 Arch Linux 镜像源</h2><p>编辑 <code>/etc/pacman.d/mirrorlist</code>，将 Manjaro 镜像源删除，替换为 Arch Linux 对应的镜像源地址。我这里选择了科大和上交的源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf">Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch<br>Server = https://mirror.sjtu.edu.cn/archlinux/$repo/os/$arch<br></code></pre></td></tr></table></figure><p>然后同步数据库，但需要注意，这个时候<strong>不要更新软件</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -Syy<br></code></pre></td></tr></table></figure><h2 id="微调软件配置"><a href="#微调软件配置" class="headerlink" title="微调软件配置"></a>微调软件配置</h2><p>虽然 Manjaro 基于 Arch，但在一些关键软件包上还是有区别的，针对这些软件包我们全部需要调整。</p><h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><p>Manjaro 和 Arch Linux 的 Bash 封装不同，Manjaro 将 Bash 本身与 bash 的配置文件 <code>bashrc</code> 封装成了 <code>bash</code> 和 <code>bashrc-manjaro</code> 两个软件包，而 Arch 则封装为一个包 <code>bash</code> 。并且，Manjaro 的 <code>bash</code> 包依赖于 <code>bashrc-manjaro</code>，所以需要对现有 Manjaro 文件系统进行微调。</p><p>移除旧的 <code>bashrc</code> 文件，然后重新安装 <code>bash</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mv</span> /etc/bash.bashrc /etc/bash.bashrc.old<br>sudo <span class="hljs-built_in">mv</span> /etc/skel/.bashrc /etc/skel/.bashrc.old<br>sudo pacman -Sy bash<br></code></pre></td></tr></table></figure><p>安装成功后，卸载 <code>bashrc-manjaro</code> 包。</p><div class="note note-warning">            <p>卸载 Manjaro 相关包时，避免使用 <code>-Rs</code>、<code>-Rsn</code>、<code>-Rsc</code>、<code>-Rsnc</code> 等带有 <code>s</code> 和 <code>c</code> 的参数，防止破坏系统组件。</p>          </div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -Rn bashrc-manjaro<br></code></pre></td></tr></table></figure><h3 id="Linux-内核"><a href="#Linux-内核" class="headerlink" title="Linux 内核"></a>Linux 内核</h3><p>Linux 内核，Arch 官方始终只提供最新版本 <code>linux</code> 和长期支持版本 <code>linux-lts</code>，但是 Manjaro 提供了多个不同的版本 <code>linux-版本号</code>。为了保险，我们先安装 Arch Linux 的 <code>linux</code> 内核，再卸载 Manjaro 的内核。</p><p>先查找 Manjaro 内核的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -Qsq linux | grep linux<br></code></pre></td></tr></table></figure><p>然后找到 <code>linux**</code> 这样一个包，比如 <code>linux66</code>、<code>linux515</code> 之类的。</p><p>这个包后面的数字，就是版本号。记下包名，卸载 Manjaro 的 Linux 内核的时候，要全部卸载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S linux linux-headers<br>sudo pacman -Rn linux66 <span class="hljs-comment"># 填写刚刚记下的包名</span><br>sudo pacman -S linux-firmware<br></code></pre></td></tr></table></figure><p>如果有对应的 <code>headers</code> 也要全部卸载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -Rn linux66-headers<br><span class="hljs-comment"># 如果有就卸载，没有就跳过</span><br></code></pre></td></tr></table></figure><h3 id="pacman-mirrors"><a href="#pacman-mirrors" class="headerlink" title="pacman-mirrors"></a><code>pacman-mirrors</code></h3><p><code>pacman-mirrors</code> 是 Manjaro 自己的镜像配置文件，Arch Linux 只使用 <code>pacman-mirrorlist</code>。由于 <code>pacman-mirrors</code> 和 Manjaro 的 Pacman 绑定，所以这一步我们需要先安装 Arch Linux 的 Pacman，然后通过破坏依赖的方式移除 <code>pacman-mirrors</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S pacman<br>sudo pacman -Rdd pacman-mirrors libpamac python-manjaro-sdk<br>sudo pacman -Rn $(pacman -Qsq pamac)<br></code></pre></td></tr></table></figure><h3 id="Manjaro-专属软件"><a href="#Manjaro-专属软件" class="headerlink" title="Manjaro 专属软件"></a>Manjaro 专属软件</h3><p>Manjaro 添加了自己专属的一些软件，我们也全部卸载，防止与 Arch Linux 冲突。</p><p>由于部分软件与系统组件深度绑定，为防止破坏系统组件，我们先安装部分 Arch Linux 的系统组件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># base 依赖一个 manjaro 软件包，先换成 Arch 的</span><br>sudo pacman -S base<br><br><span class="hljs-comment"># -Qmq 参数用于查找不在软件源里的已安装的包</span><br>sudo pacman -Rn $(pacman -Qmq | grep manjaro)<br>sudo pacman -Rn $(pacman -Qmq | grep mhwd)<br>sudo pacman -Rn web-installer-url-handler<br></code></pre></td></tr></table></figure><div class="note note-danger">            <p>切记<strong>不要使用 <code>-Qsq</code> 代替 <code>-Qmq</code>！</strong></p><p><code>-Qsq</code> 的结果包含 <code>filesystem</code>，这个包是系统必备的，待会重新安装 Arch 软件包的时候会<strong>自动替换为 Arch 版本</strong>。这个包能被搜到是因为描述中包含 <code>Manjaro</code>，而它<strong>不是 Manjaro 独有的</strong>！</p>          </div><p><code>mhwd</code> 是 Manjaro 检测硬件并自动安装驱动的一个库，<del>既然你都用 Arch 了，难道还不能自己装驱动吗？</del></p><p>系统中可能还有 Manjaro 软件的残留，但我不建议现在一个一个查找删除，而是等到 Arch 软件包安装好之后再按需删除。</p><h2 id="安装-Arch-Linux-软件包"><a href="#安装-Arch-Linux-软件包" class="headerlink" title="安装 Arch Linux 软件包"></a>安装 Arch Linux 软件包</h2><p>我们先将系统中 Manjaro 的软件包替换为对应的 Arch Linux 软件包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 清除以前下载的 Manjaro 的软件包</span><br>sudo pacman -Scc<br><span class="hljs-comment"># 重新安装所有已安装的库内软件包</span><br>sudo pacman -Syu $(pacman -Qnq)<br></code></pre></td></tr></table></figure><h2 id="修改-GRUB-主题"><a href="#修改-GRUB-主题" class="headerlink" title="修改 GRUB 主题"></a>修改 GRUB 主题</h2><p>Manjaro 默认的 GRUB 使用的是定制主题，我们已经删掉了，对应的配置也需要移除。</p><p>编辑 <code>/etc/default/grub</code>，修改为其他主题，或者注释掉使用默认界面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 搜索 THEME 即可，一般在 47 行上下<br># GRUB_THEME=&quot;/usr/share/grub/themes/manjaro/theme.txt&quot;<br></code></pre></td></tr></table></figure><p>我没有使用主题，直接注释掉了。</p><h2 id="Fcitx-中文输入法"><a href="#Fcitx-中文输入法" class="headerlink" title="Fcitx 中文输入法"></a>Fcitx 中文输入法</h2><p>Manjaro 通过依赖的方式，在安装 Fcitx5 的时候向 <code>/etc/xdg</code> 添加 <code>fcitx5</code> 文件夹以及配置文件，自动启用了 <code>Fcitx5</code> 在软件中的输入功能（软件包<code>manjaro-asian-input-support-fcitx5</code>），因此，Manjaro 安装 <code>Fcitx5</code> 后开箱即用，不需要配置。</p><p>但是 Arch Linux 软件源没有这一软件包，应当手动对 Fcitx5 进行配置。</p><p>编辑 <code>/etc/environment</code>，加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs conf">GTK_IM_MODULE=fcitx<br>QT_IM_MODULE=fcitx<br>XMODIFIERS=@im=fcitx<br>INPUT_METHOD=fcitx<br>SDL_IM_MODULE=fcitx<br>GLFW_IM_MODULE=ibus<br></code></pre></td></tr></table></figure><p>注意 <code>GLFW_IM_MODULE=ibus</code> 的 <code>ibus</code> 不能修改为其他的（兼容性问题）。然后保存。</p><h2 id="Zsh"><a href="#Zsh" class="headerlink" title="Zsh"></a>Zsh</h2><p>Manjaro 默认使用 Zsh 并添加了很多自己的配置，这些配置被打包成以 <code>manjaro</code> 开头的包，由于我们已经删掉了，因此需要重新配置。</p><p>当然不配置也能用，只不过没有原来 Manjaro 的那些“特色功能”了。</p><p><a href="#%E5%AE%89%E8%A3%85%E5%90%8E%E6%81%A2%E5%A4%8Dzsh">配置工作</a>我们待切换完成后再讲。</p><h2 id="重构-GRUB-启动菜单"><a href="#重构-GRUB-启动菜单" class="headerlink" title="重构 GRUB 启动菜单"></a>重构 GRUB 启动菜单</h2><p>由于我们重新安装了新内核，我们需要同步重构 GRUB 的配置文件 <code>grub.cfg</code>，以确保顺利引导。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo grub-mkconfig -o /boot/grub/grub.cfg<br></code></pre></td></tr></table></figure><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>重新启动电脑，你会发现原来 Manjaro 的主题和壁纸都变成默认的了。恭喜你，你已经成功切换到 Arch Linux 系统！</p><p>确认系统工作正常之后，就可以自行清理不需要的软件包或者 Manjaro 残留了。</p><p><img src="/2024/02/03/migrating-from-manjaro-to-arch/arch-finish.png" alt="全部完成后"></p><p>如果不需要配置 Manjaro 原来的 Zsh，就可以结束了。如果需要恢复 Manjaro 原来的 Zsh 功能，请继续往下看。</p><h2 id="Zsh-配置"><a href="#Zsh-配置" class="headerlink" title="Zsh 配置"></a>Zsh 配置</h2><p>为什么把 Zsh 配置放最后讲呢，一个是比较复杂，另一个是确保系统基本组件正常运转后，再去做这些锦上添花的工作比较保险。</p><p>Manjaro 的 Zsh 的一些快捷功能是由以下软件包实现的，它们不属于 Manjaro 本身。</p><table><thead><tr><th align="center">软件包</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>oh-my-zsh</code></td><td align="center">Zsh 高效配置框架</td></tr><tr><td align="center"><code>oh-my-zsh-powerline-theme-git</code></td><td align="center">Powerline 主题</td></tr><tr><td align="center"><code>zsh-syntax-highlighting</code></td><td align="center">语法高亮</td></tr><tr><td align="center"><code>zsh-autosuggestions</code></td><td align="center">自动补全</td></tr></tbody></table><p>把这些软件包安装之后重新配置，即可使用相似功能。<del>（可我还是喜欢 Manjaro 绿油油的主题）</del></p><h3 id="配置-Arch-Linux-CN-源"><a href="#配置-Arch-Linux-CN-源" class="headerlink" title="配置 Arch Linux CN 源"></a>配置 Arch Linux CN 源</h3><p>虽说这些安装包都可以从 AUR 上获取，但是 Arch Linux CN 源为我们提供了已经打包好的软件包，可以通过 Pacman 直接拉取，快捷高效。</p><p>编辑 <code>/etc/pacman.conf</code>，在文件末尾添加 Arch Linux CN 源。我这里选择的是科大镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs conf">[archlinuxcn]<br>Server = https://mirrors.ustc.edu.cn/archlinuxcn/$arch<br></code></pre></td></tr></table></figure><p>然后安装软件源 Keyring：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S archlinuxcn-keyring<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>如果遇到错误，可以参考<a href="https://www.archlinuxcn.org/archlinuxcn-keyring-manually-trust-farseerfc-key/">此篇文章</a>。</p>          </div><h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><p>执行以下命令安装相关软件包。相比于 Powerline 主题，我更喜欢 Powerlevel 10K 这个主题，风格几乎一模一样但性能更好。所以我选择安装 Powerlevel 10K 主题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S zsh-theme-powerlevel10k oh-my-zsh-git zsh-syntax-highlighting zsh-autosuggestions<br></code></pre></td></tr></table></figure><h3 id="配置-zshrc"><a href="#配置-zshrc" class="headerlink" title="配置 .zshrc"></a>配置 <code>.zshrc</code></h3><p>复制新的 <code>.zshrc</code> 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> ~/.zshrc ~/.zshrc.old    <span class="hljs-comment"># 备份原来的文件</span><br><span class="hljs-built_in">cp</span> /usr/share/oh-my-zsh/zshrc ~/.zshrc<br></code></pre></td></tr></table></figure><p>然后编辑 <code>~/.zshrc</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ZSH_THEME 这一行修改如下</span><br>ZSH_THEME=<span class="hljs-string">&quot;powerlevel10k/powerlevel10k&quot;</span><br><br><span class="hljs-comment"># 这一行去掉注释</span><br>ENABLE_CORRECTION=<span class="hljs-string">&quot;true&quot;</span><br><br><span class="hljs-comment"># plugins 这一行，添加以下两个插件</span><br>plugins=(zsh-syntax-highlighting zsh-autosuggestions)<br><span class="hljs-comment"># 其他插件如果有也保留</span><br></code></pre></td></tr></table></figure><p>然后将插件链接到正确的目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> -s /usr/share/zsh/plugins/zsh-syntax-highlighting /usr/share/oh-my-zsh/custom/plugins/<br><br>sudo <span class="hljs-built_in">ln</span> -s /usr/share/zsh/plugins/zsh-autosuggestions /usr/share/oh-my-zsh/custom/plugins/<br><br>sudo <span class="hljs-built_in">ln</span> -s /usr/share/zsh-theme-powerlevel10k /usr/share/oh-my-zsh/themes<br><br>sudo <span class="hljs-built_in">mv</span> /usr/share/oh-my-zsh/themes/zsh-theme-powerlevel10k /usr/share/oh-my-zsh/themes/powerlevel10k<br></code></pre></td></tr></table></figure><p>然后执行 <code>source ~/.zshrc</code> 并根据向导配置即可。</p><p><img src="/2024/02/03/migrating-from-manjaro-to-arch/zsh-conf-neofetch.png" alt="配置完成后的样式，还是很好看的，自动补全和语法高亮也生效了"></p><p>完成后可以将默认 Shell 切换到 Zsh。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chsh -s /bin/zsh<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>Root 用户的 Shell <strong>应当设定为 Bash</strong> 而不是 Zsh 等其他 Shell。我也不建议更改 Root 用户的 Shell。</p>          </div><p>就这样。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>GNU/Linux</tag>
      
      <tag>Manjaro</tag>
      
      <tag>Arch Linux</tag>
      
      <tag>系统切换</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 高精度运算 学习记录</title>
    <link href="/2024/02/02/bignum-cpp/"/>
    <url>/2024/02/02/bignum-cpp/</url>
    
    <content type="html"><![CDATA[<p><del>咱们都知道，</del><code>int</code> 的范围大约是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>±</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">\pm10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">±</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>，<code>double</code> 的范围大约是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup></mrow><annotation encoding="application/x-tex">10^{18}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span>，那么比这还大的数，我连存储都是个难题，该怎么去进行计算呢？</p><p>这个时候，当常规的变量无法存储这么大的数字时，我们就得用点<del>歪门邪道</del>了。</p><h2 id="用-Python-直接算"><a href="#用-Python-直接算" class="headerlink" title="用 Python 直接算"></a><del>用 Python 直接算</del></h2><p>好吧， Python 确实可以直接算……</p><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>一个有着很多位的数，我们可以通过<strong>数组</strong>或者 <code>vector</code> 存储每个位上的数字。</p><p>读入的时候，存储的字符串中，高位在前面，低位在后面。但是习惯上，下标最小的位置存放的是数字的<strong>最低位</strong>（<strong>反转存储</strong>），这样的话，当最高位前面还是在添加数字的时候，方便直接在数组后面加，而不是正常存储顺序那样还得把整个字符串往后移动。</p><p>我的反转数字的解决方案如下，最后我将数字存储到一个数组中，也方便后续操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> a[])</span></span>&#123;<br>    string as;<br>    cin &gt;&gt; as;<br>    <span class="hljs-type">int</span> lena=<span class="hljs-built_in">strlen</span>(as);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;lena;++i)<br>        a[i]=as[lena-i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h2><p>对于四则运算，我采取的方法是<strong>模拟竖式</strong>。</p><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>按照竖式的逻辑，从最小位开始逐位相加，需要进位的时候，在高位加一个 1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">plus</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> b[],<span class="hljs-type">int</span> res[])</span></span>&#123;<br>    <span class="hljs-comment">// 假设 a 和 b 均为反转存储后的数字，res 用来存放结果且已经设置为全 0</span><br>    <span class="hljs-comment">// LEN 为所有数组的最大长度</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;LEN;++i)&#123;<br>        res[i]+=a[i]+b[i];<br>        <span class="hljs-keyword">if</span>(res[i]&gt;=<span class="hljs-number">10</span>)&#123;<br>            ++res[i+<span class="hljs-number">1</span>];<br>            res[i]%=<span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p>减法也一样，需要借位的时候高位减去 $1$。</p><p>不过有时候会遇到结果为负这个问题，我的处理方法是先判断大小，如果被减数小于减数就反过来调用，结果再添加负号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> b[],<span class="hljs-type">int</span> res[])</span></span>&#123;<br>    <span class="hljs-comment">// 假设已经判断好 a 大于 b</span><br>    res[i]+=a[i]-b[i];<br>    <span class="hljs-keyword">if</span>(res[i])&lt;<span class="hljs-number">0</span>&#123;<br>        c[i+<span class="hljs-number">1</span>]<span class="hljs-number">-1</span>;<br>        res[i]+=<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>乘法也一样，直接用竖式计算的思路就可以了。不过我打算最后一起处理进位而不是每次都处理，其实这个地方也无所谓……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mul</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> b[],<span class="hljs-type">int</span> res[])</span></span>&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;LEN<span class="hljs-number">-1</span>;++i)&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    这里直接计算结果中的从低到高第 i 位，且一并处理了进位</span><br><span class="hljs-comment">    第 i 次循环为 c[i] 加上了所有满足 p + q = i 的 a[p] 与 b[q] 的乘积之和</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=i++j)<br>      res[i]+=a[j]*b[i-j];<br><br>    <span class="hljs-keyword">if</span>(res[i]&gt;=<span class="hljs-number">10</span>)&#123;<br>      res[i+<span class="hljs-number">1</span>]+=res[i]/<span class="hljs-number">10</span>;<br>      res[i]%=<span class="hljs-number">10</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不过看 <a href="https://oi-wiki.org/math/bignum/#karatsuba-%E4%B9%98%E6%B3%95">OI Wiki</a> 上还介绍了一个 Karatsuba 乘法的方法，时间复杂度要<strong>小于竖式计算</strong>，我不介绍了，<del>我也看不懂</del>。</p><h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>除法我感觉用的也不多（？）也许是我感觉，我还没用上，等我用到了再写吧。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>高精度</tag>
      
      <tag>C++</tag>
      
      <tag>算法竞赛</tag>
      
      <tag>高精度运算</tag>
      
      <tag>数值计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Hexo 和 Fluid 搭建一个漂亮的静态网页博客</title>
    <link href="/2024/02/01/building-a-static-website-with-hexo/"/>
    <url>/2024/02/01/building-a-static-website-with-hexo/</url>
    
    <content type="html"><![CDATA[<p>第一篇文章，当然是要记录一下怎么建的这个网站啦。<del>也没人告诉你第一篇必须写这个吧（</del></p><p>我的建站方案是 <code>Hexo</code> 和 <code>Fluid</code> 主题。我原本打算使用 <code>Jekyll</code> 作为生成静态博客的方案，不过后来我看到 <code>Hexo</code> 的功能更强大，插件更多，速度好像（也许真的更快？）也更快，还能一键部署，于是最终选择了 <code>Hexo</code> 作为静态网页的生成器。</p><p>本篇适用于刚刚接触 <code>Hexo</code> 和 <code>Markdown</code> 的零基础用户。本人水平不高，有问题也请指正。（评论功能正在开发）</p><p>闲话少说，我们进入正题。</p><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 <code>Git</code></h2><p>安装 <code>Hexo</code> 之前需要先安装 <code>Git</code>。<code>Git</code> 是一个版本控制软件，由著名的 Linux 之父 Linus Torvalds 开发。<del>扯远了（</del></p><p>绝大多数 GNU&#x2F;Linux 发行版的仓库里都有 Git。Windows 用户可以从<a href="https://git-scm.com/downloads">官网</a>下载安装。</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 <code>Hexo</code></h2><p><code>Hexo</code> 是一个基于 <code>Node.JS</code> 的静态网页生成器。部署 <code>Hexo</code> 需要先安装 <code>Node.JS</code>，然后使用 <code>npm</code> 安装。</p><p>部分 GNU&#x2F;Linux 发行版已经在自己的软件包中添加了 <code>Hexo</code>，名字一般叫 <code>hexo-cli</code>，也可以从软件仓库中直接安装。（Arch Linux 的在 AUR 中）</p><p>Windows系统安装 <code>Node.JS</code> 时，记得勾选 <code>Add to PATH</code> 选项（默认已经勾选）</p><p>如果选择从 <code>npm</code> 安装，先设置国内镜像，再执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p><del>反正我是直接从 AUR 上安装 hexo-cli 的。</del></p><h2 id="部署网页源代码仓库"><a href="#部署网页源代码仓库" class="headerlink" title="部署网页源代码仓库"></a>部署网页源代码仓库</h2><p>新建一个空文件夹，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br>npm install<br></code></pre></td></tr></table></figure><p><img src="/2024/02/01/building-a-static-website-with-hexo/hexo-init.png" alt="执行上述命令后的终端输出"></p><p>如果克隆 GitHub 仓库那一步比较慢或者连接失败，可以考虑加个代理。</p><p>然后你会发现目录下多了很多东西，这就是你的<strong>网页源代码仓库</strong>，大概有这些东西：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">_config.yml<br>node_modules<br>scaffolds<br>.github<br>package.json<br><span class="hljs-built_in">source</span><br>_config.landscape.yml<br>.gitignore<br>package-lock.json<br>themes<br></code></pre></td></tr></table></figure><p><code>Hexo</code> 默认有一个很简单<del>粗暴</del>的页面，执行一下命令，可以启动本地服务器进行预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g <span class="hljs-comment"># 生成网页</span><br>hexo s <span class="hljs-comment"># 启动本地服务器</span><br></code></pre></td></tr></table></figure><p>浏览器访问 <code>http://localhost:4000</code> 即可看到你的第一个博客页面。</p><p><img src="/2024/02/01/building-a-static-website-with-hexo/hexo-sample.png" alt="默认的页面，采用默认的 Landscape 主题，简单干净"></p><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>终端进入源代码文件夹，执行以下命令可以创建一篇文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new post <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>其中 <code>post</code> 和 <code>My New Post</code> 可以根据实际情况修改。详细信息可以查阅<a href="https://hexo.io/zh-cn/docs/writing">官方文档</a>。</p><p>然后 <code>source</code> 文件夹中会出现一个 <code>My New Post.md</code> 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p><p>写完后运行 <code>hexo g</code> 将文章渲染即可。然后你就能通过 <code>hexo s</code> 看到你的网页的更改了。</p><p><img src="/2024/02/01/building-a-static-website-with-hexo/my-new-post-sample-blog.png" alt="写好的内容呈现的就是这样子"></p><h2 id="部署到-Git-Pages"><a href="#部署到-Git-Pages" class="headerlink" title="部署到 Git Pages"></a>部署到 Git Pages</h2><p>Git Pages 是一个托管静态网站的最佳选择。这个可能没听说过，GitHub Pages 一定听说过吧。<code>Hexo</code> 可以<strong>一键部署</strong>到这样的静态网站托管服务上去。</p><p>首先按照托管商的文档设置好仓库。具体怎么做取决于你要怎么去托管。以 Github Pages 为例，可以参照<a href="https://docs.github.com/zh/pages/getting-started-with-github-pages/creating-a-github-pages-site">官方文档</a>来建立一个 Github Pages 仓库。</p><p>然后在源代码文件夹下安装 <code>hexo-deployer-git</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后修改 <code>_config.yml</code> 文件末尾的 <code>Deployment</code> 部分，修改成如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">填写仓库</span> <span class="hljs-string">Git</span> <span class="hljs-string">链接</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">填写仓库分支</span><br></code></pre></td></tr></table></figure><p>GitHub 要求分支为 <code>master</code>，Codeberg 要求分支为 <code>pages</code>，其他请参照对应服务商的要求。</p><p>完成后运行 <code>hexo d</code> 将网站上传部署。</p><h2 id="安装-Fluid-主题"><a href="#安装-Fluid-主题" class="headerlink" title="安装 Fluid 主题"></a>安装 Fluid 主题</h2><p><code>Fluid</code> 是一个非常漂亮的 Material Design 风格的（<del>感觉不太像 MD</del>）响应式主题，本站采用的就是 Fluid 主题。</p><p>安装 Fluid 主题也非常简单，由于现在安装的 Hexo 基本都是 5.0.0 以上的版本，我直接按照官方推荐的方式，通过 <code>npm</code> 直接安装。</p><ol><li><p>进入博客目录执行命令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p> 然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的<a href="https://github.com/fluid-dev/hexo-theme-fluid/raw/master/_config.yml">配置文件</a>的内容放进去。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://github.com/fluid-dev/hexo-theme-fluid/raw/master/_config.yml -o _config.fluid.yml<br><span class="hljs-comment"># GitHub 要是慢，可以用 GitHub 加速或者使用代理</span><br></code></pre></td></tr></table></figure><p> 然后配置 <code>_config.fluid.yml</code> 。</p></li><li><p>指定主题</p><p> 如下修改 Hexo 博客目录中的 <code>_config.yml</code>：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure><p> 生成的网页应该是这样：</p><p> <img src="/2024/02/01/building-a-static-website-with-hexo/hexo-fluid-sample-blog.png" alt="Fluid 初始页面"></p></li><li><p>创建「关于页」</p><p> 首次使用主题的「关于页」需要手动创建：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p> 创建成功后，编辑博客目录下 &#x2F;source&#x2F;about&#x2F;index.md，添加 layout 属性。</p><p> 修改后的文件示例如下：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p> 这里写关于页的正文，支持 Markdown, HTML。</p><p> 效果应该是这样的：</p><p> <img src="/2024/02/01/building-a-static-website-with-hexo/hexo-fluid-about-sample.png" alt="关于页面初始样式"></p></li></ol><p>更多的配置和参数可以参照<a href="https://hexo.fluid-dev.com/docs/">官方文档</a>，这里就不多说啦。</p><p>于是呢，一个简单的静态博客就配置好了！</p><p>就这样。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网站</tag>
      
      <tag>建站</tag>
      
      <tag>Hexo</tag>
      
      <tag>静态博客</tag>
      
      <tag>静态网页</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
